#!/usr/bin/env bash

script=$0
torargs=""

CONSOLEPORN=1

ENABLE_SYNOPSES=1
if [ "$domain" = pasteboard ]; then
  ENABLE_SYNOPSES=0
fi

if [ -n "$VISUAL" ]; then
  view=$VISUAL
elif [ -n "$EDITOR" ]; then
  view=$EDITOR
elif [ -n "$PAGER" ]; then
  view=$PAGER
else
  view=more
fi


if (( $CONSOLEPORN )); then
  DARKGREEN=$'\e[00;32m'
  GREEN=$'\e[01;32m'
  TEAL=$'\e[00;36m'
  DARKGREY=$'\e[01;30m'
  CYAN=$'\e[01;36m'
  LIGHTGREY=$'\e[00;37m'
  RED=$'\e[00;31m'
  PINK=$'\e[01;31m'
  BLACK=$'\e[00;30m'
  BLUE=$'\e[01;34m'
  DARKBLUE=$'\e[00;34m'
  WHITE=$'\e[01;37m'
  RESET=$'\e[0m'
  YELLOW=$'\e[01;33m'
  MAGENTA=$'\e[01;35m'
  PURPLE=$'\e[00;35m'

  UP=$'\033[1A'
  DOWN=$'\033[1B'


  SAVE=$'\033[s'
  DELEOL=$'\033[0J'
  RESTORE=$'\033[u'
fi

function bottom () {
  (( $CONSOLEPORN )) || return
  L=$(tput lines)
  b='\033['$(( L - 1 ))'H'
  echo -en "$b"
}

version="0.9b"



APPEND_DOMAIN_TO_DATA=0

MUTEX=0
LAST_SYNOPSIS=$(mktemp)

if which dos2unix &> /dev/null ; then
  DOS2UNIXPIPE=dos2unix 
else
  DOS2UNIXPIPE=cat
fi

y=$YELLOW; g=$DARKGREEN; G=$GREEN
BANNER=${GREEN}'
 __ \                             |              __ \ _)                 
 |   | |   | __ `__ \  __ \   __| __|  _ \  __|  |   | |\ \   / _ \  __| 
 |   | |   | |   |   | |   |\__ \ |    __/ |     |   | | \ \ /  __/ |    
____/ \__,_|_|  _|  _| .__/ ____/\__|\___|_|    ____/ _|  \_/ \___|_|    
                      _|  '${DARKGREEN}'                                               
                      ___________________
                      \\                 \
                       \\     '${G}O${g}'           \
                        \\       '${G}o${g}'         \
                         \\        '${G}.${g}'        \
      ./-----------------------'${G}o${g}'---------------,
     //----------------//        '${G}o${g}'        //   |
    //                //      ,,,I       //___ |
   //                //      ;___I      //    ||
  //                //       ('${y}o${g}'_'${y}o${g}'I     //     ||
 //                //,___,---,\=+J,---//      ||
||----------------||``"""=---.____.--//       ||      ___/-\___
------------------------------------/ --------+|     |---------|
| '${GREEN}'BRUTE FORCE '${DARKGREEN}'|       | '${GREEN}'FIND WEIRD'${DARKGREEN}' |           |      | | | | |
|  '${GREEN}'PASTEBINS'${DARKGREEN}'  |       |    '${GREEN}'SHIT'${DARKGREEN}'    |           |      | | | | |
|--------------       -------------|           |      | | | | |
|                                  |           |      | | | | |
------------------------------------------------      |_______|
'
## Alt font:
#██▄     ▄   █▀▄▀█ █ ▄▄    ▄▄▄▄▄      ▄▄▄▄▀ ▄███▄   █▄▄▄▄     ██▄   ▄█     ▄   ▄███▄   █▄▄▄▄ 
#█  █     █  █ █ █ █   █  █     ▀▄ ▀▀▀ █    █▀   ▀  █  ▄▀     █  █  ██      █  █▀   ▀  █  ▄▀ 
#█   █ █   █ █ ▄ █ █▀▀▀ ▄  ▀▀▀▀▄       █    ██▄▄    █▀▀▌      █   █ ██ █     █ ██▄▄    █▀▀▌  
#█  █  █   █ █   █ █     ▀▄▄▄▄▀       █     █▄   ▄▀ █  █      █  █  ▐█  █    █ █▄   ▄▀ █  █  
#███▀  █▄ ▄█    █   █                ▀      ▀███▀     █       ███▀   ▐   █  █  ▀███▀     █   
#       ▀▀▀    ▀     ▀                               ▀                    █▐            ▀    

# default_domain=ghostbin.com
#  default_ua="Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"
#  default_db="visited.db"
#  [ -n "$domain" ] || domain="$default_domain"
#  loot=$domain-loot
#  [ -n "$useragent" ] || useragent="$default_ua"
#  [ -d "$loot" ] || mkdir $loot
#  [ -n "$db" ] || db="$default_db"

function greet ()
{
  echo "${DARKGREEN}"
  echo "${BANNER}"
  echo "${GREEN}DumpsterDiver $version"
  echo "${DARKGREEN}Authors: oblivia-simplex, lillypad"
  echo "${GREEN}    -h | --help       --> This Help Menu"
  echo "${GREEN}    -u | --user-agent --> User-Agent Header"
  echo "${GREEN}    -d | --database   --> SQLite Database File"
  echo "${GREEN}    -t | --tor        --> Tor Proxy (ip:port)"
  echo "${GREEN}    -b | --bin        --> Bin Selection"
  echo "${GREEN}    -s | --synopsis   --> Synopsis (enable:disable)"
  echo "${GREEN}    -l | --list-bins  --> List Supported Bins"
  echo "${GREEN}    -j | --job-limit  --> Job Limit (default=1)"
  echo "${GREEN}    -v | --version    --> Version"
  echo "${DARKGREEN}Using: pastebin:   $domain"
  echo             "       database:   $db"
  echo             "       user-agent: \"$useragent\""
  if [ "$tor" = "1" ]; then
      echo         "       tor: disabled"
  else
      echo         "       tor: $tor"
  fi
  echo             "       joblimit: $joblimit"
  echo -en "${RESET}"
}

function pause ()
{
    echo -e "\n${GREEN}HIT <ENTER> TO CONTINUE...${RESET}"
    read
    echo -e "\n"
}



function fadebar ()
{
  if ! (( $CONSOLEPORN )); then
    echo -n "=====" 
    return
  fi
  i=0
  num=$1
  if (( $num < 0 )); then
    num=$(( $num * -1 ))
    pipe=tac
  else
    pipe=cat
  fi
  for colour in ${DARKGREY} ${LIGHTGREY} ${TEAL} ${CYAN} ${WHITE}; do
    for i in `seq 1 $num`; do
      echo -e "${colour}=${colour}"
    done
  done | $pipe | tr -d '\n'
  echo -en "${RESET}"
}

function freemem ()
{
  free -m | awk '{print $4}' | head -n 2 | tail -n 1
}

function freemem_echo ()
{
  fm=$(freemem)
  if (( $fm < 128 )); then
    echo "${PINK}[${fm}M free]${RESET}"
  else
    echo "${DARKGREY}[${fm}M free]${RESET}"
  fi
}

function lootcount_echo ()
{
  echo "${DARKGREY}[$(ls $loot | wc -l | awk '{print $1}') looted]${RESET}"
}

function httpcode_echo ()
{
  code=$1
  color=$DARKGREY
  case "$code" in 
    1*)
      colour=$WHITE
      ;;
    200)
      colour=$CYAN
      ;;
    2*)
      colour=$TEAL
      ;; 
    3*)
      colour=$BLUE
      ;;
    403)
      colour=$PINK
      ;;
    404)
      colour=$DARKGREY # most common, and to be expected
      ;;
    5*)
      colour=$YELLOW
      ;;
    *)
      colour=$GREEN # ???
      ;;
  esac
  echo "${DARKGREY}[${colour}${code}${DARKGREY}]${RESET}"
}

function timestamp_echo ()
{
  echo "${DARKGREY}[$(date +"%F %T")]${RESET}"
}

function mutex_acquire ()
{
  while (( $MUTEX )); do
    sleep 0.1
  done
  MUTEX=1
}

function mutex_release ()
{
  MUTEX=0
}


function mecho ()
{
  while (( $MUTEX )); do
    sleep 0.1
  done
  MUTEX=1
  echo $@
  MUTEX=0
}

function mcat ()
{
  while (( $MUTEX )); do
    sleep 0.1
  done
  MUTEX=1
  cat $@
  MUTEX=0
}

function sqlite_execute(){
    while :; do
        result=$(sqlite3 $1 "${2}" 2>&1)
        if [ "${result}" = "Error: database is locked" ]; then
            sleep 0.01
            continue
        else
            echo -n "${result}"
            break
        fi
    done
}

function makeurl(){
    case "$domain" in
        termbin.com)
            n=4
            charset=a-z0-9
            prefix="http://termbin.com"
            key=$(cat /dev/urandom | tr -dc $charset | head -c $n)
            echo "${prefix}/${key}"
            ;;
        pastebin.com)
          # Uses cloudflare, relatively large address space, not great.
            n=8
            charset=a-z0-9
            prefix="https://pastebin.com/raw"
            key=$(cat /dev/urandom  | tr -dc $charset | head -c $n)
            echo "${prefix}/${key}"
            ;;
        ghostbin.com)
            n=5
            charset=a-z0-9
            prefix="https://ghostbin.com/paste"
            key=$(cat /dev/urandom | tr -dc $charset | head -c $n)
            suffix="raw" # or download
            echo "${prefix}/${key}/${suffix}"
            ;;
        paste.ee)
          # will 403 all tor connections
            n=5
            charset=a-z0-9
            prefix="https://paste.ee/d"
            key=$(cat /dev/urandom  | tr -dc $charset | head -c $n)
            suffix="0"
            echo "${prefix}/${key}/${suffix}"
            ;;
        p.ip.fi)
            n=4
            charset=a-z0-9
            prefix="http://p.ip.fi"
            key=$(cat /dev/urandom | tr -dc $charset | head -c $n)
            echo "${prefix}/${key}"
            ;;
        pasteboard.co)
          # haven't gotten this one to work yet. screenshot pngs. 
            n=4
            charset=A-Za-z0-9
            prefix="https://pasteboard.co/images/"
            prekey=HcF # is this invariant?
            key=$(cat /dev/urandom | tr -dc $charset | head -c $n)
            suffix=/download
            echo "${prefix}/${prekey}${key}/${suffix}"
            ;;
    esac
}

function synopsis () {
  file="$1"
  url="$2"
  cols=$(tput cols)
  rows=$(tput lines)
  showrows=$(( (rows - 10) / 2 ))
  bytes=$(wc -c $file | awk '{print $1}')

  echo $file > $LAST_SYNOPSIS
  clear
  (
    echo "${WHITE},--- BEGIN SYNOPSIS ---"
    echo -n ${GREEN} && cat $file \
      | $DOS2UNIXPIPE \
      | grep -vP "^\s*$" $file \
      | head -n $showrows \
      | sed "s/^/${WHITE}|${GREEN} /g"
    rem=$(( $(wc -l $file | awk '{print $1}') - $showrows ))
    if (( $rem > 0 )); then
      (( $rem > $showrows )) && rem=$showrows
      echo -n ${DARKGREEN} && (cat $file && echo) \
        | $DOS2UNIXPIPE \
        | grep -vP "^\s*$" $file \
        | tail -n $rem \
        | sed "s/^/${WHITE}|${DARKGREEN} /g"
    fi
    echo -e "${WHITE}|${CYAN} $url"
    echo -e "${WHITE}|${CYAN} $file${RESET}"
    echo -e "${WHITE}|${CYAN} $bytes bytes: SIGINT to view${RESET}"
    echo -e "${WHITE}\`--- END SYNOPSIS -----${RESET}\n\n\n"
    ) | sed -e "/.\{$cols\}/ s/^\(.\{$(( cols - 20 ))\}\).*\(.\{15\}\)$/\1[...]\2/" \
      | cat
}

function pii(){
    file=$1
    hits=0
    #reg_cc="(?:4[0-9]{12}(?:[0-9]{3})?|[25][1-7][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})"
    cat $file \
      | grep -P "([0-9]{1,3}\.){3}[0-9]{1,3}" \
      | grep -vP "(127(\.[0-9]{1,3}){3}|0\.0\.0\.0)" \
      >> ${file}.pii \
      && hits=$(( hits + 1 ))
    
    # now look for cryptocurrency keys
    cat $file \
      | grep -wP '[5KL][1-9A-HJ-NP-Za-km-z]{50,51}' \
      >> ${file}.pii \
      && hits=$(( hits + 1 ))

    # email
    cat $file \
      | grep -P "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}" \
      >> ${file}.pii \
      && hits=$(( hits + 1 ))

    # private keys and credentials
    cat $file \
      | grep -P "(PRIVATE KEY|password|credential|0day)" \
      >> ${file}.pii \
      && hits=$(( hits + 1 ))
    
    echo $hits
}

function hitrate () {
  sqlite_execute $db "SELECT (count(md5)*1.0)/count(*) 
                      FROM urls 
                      WHERE url LIKE '%$domain%';"
}

function hitrate_echo () {
  hr=$(hitrate)
  echo "${DARKGREY}[hit $(printf "%2.3f%%" $(bc <<< "100 * $hr"))]${RESET}"
}

function action(){
    while :; do
      url=$(makeurl)
      db_url=$(sqlite_execute $db "SELECT url FROM urls WHERE url = '${url}'")
      if [ "${url}" = "${db_url}" ]; then
          fademsg "[already vistited $url]"
      else
          break
      fi
    done
    tmp=$(mktemp)
    response=$(curl $torargs \
                    -A "${useragent}" \
                    --write-out %{http_code} \
                    --silent \
                    --output $tmp "${url}")
    mutex_acquire
    echo -e "$(bottom)${UP}${UP}${UP}\r${RESET}$(timestamp_echo)$(freemem_echo)$(lootcount_echo)$(httpcode_echo $response)$(hitrate_echo)\n$(fadebar 2)${WHITE}  $url  $(fadebar -2)"
    echo -en "$DELEOL"
    if [ "$response" = "200" ]; then
      md5=$(md5sum $tmp | cut -d ' ' -f 1)
      file=${loot}/${md5}
      # Check to see if the file is new to us
      if ! [ -f "$file" ]; then
        data_pii=0 #data_pii=$(pii $tmp)
        sqlite_execute $db "INSERT INTO urls(url, response, pii, md5) 
                            VALUES('${url}', 
                                   '${response}', 
                                   ${data_pii}, 
                                   '${md5}');"
        mv $tmp $file
        #rm ${tmp}.pii
        (( $ENABLE_SYNOPSES )) && synopsis $file $url
      else
        fademsg "[data $md5 from $url is redundant]" &
      fi
    else # if response is not 200
      sqlite_execute $db "INSERT INTO urls(url, response, pii) VALUES('${url}', '${response}', 0);"
      rm -f $tmp
    fi
    mutex_release
}

function fademsg () {
  msg="$*"
  if ! (( $CONSOLEPORN )); then
    echo -n "$msg"
    return
  fi
  for colour in ${WHITE} ${CYAN} ${TEAL} ${LIGHTGREY} ${DARKGREY}; do
    echo -en "$(bottom)\r${colour}${msg}${RESET}${DELEOL}"
    sleep 0.05
  done
}

function throttle(){
  joblimit=$1
  joblist=($(jobs -p))
  while (( ${#joblist[*]} >= $joblimit )); do
    sleep 0.5
    joblist=($(jobs -p))
  done
}

function cleanup () {
  tput cnorm; stty echo
  joblist=($(jobs -p))
  jn=${#joblist[*]} 
  echo "${YELLOW}Waiting for $jn jobs to finish...${RESET}"
  wait
  echo "${YELLOW}Goodbye!${RESET}"
  exit
}

function look_closer () {
  tput cnorm; stty echo
  S=$(cat $LAST_SYNOPSIS)
  if [ -z "$S" ]; then
    cleanup
  fi
  trap - INT
#  trap cleanup INT
  mecho -e "\n${CYAN}Taking a closer look at $S...\n${PINK}HIT CTRL-C AGAIN TO EXIT...${RESET}"
  wait
  sleep 2
  $view $S
  sleep 1
  trap - INT
  trap look_closer INT
  tput civis; stty -echo
}
trap look_closer INT

####################################
#               MAIN               #   
####################################
useragent="Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"
db="visited.db"
ENABLE_SYNOPSES=1
tor=1
joblimit=8
domain=ghostbin.com



if [ -n "$VISUAL" ]; then
  view=$VISUAL
elif [ -n "$EDITOR" ]; then
  view=$EDITOR
elif [ -n "$PAGER" ]; then
  view=$PAGER
else
  view=more
fi

while test $# -gt 0; do
    case "$1" in
        -h|--help)
            greet
            exit 0
            ;;
        -s|--synopsis)
            shift
            if test $# -gt 0; then
                case "$1" in
                    enable)
                        ENABLE_SYNOPSES=1
                        ;;
                    disable)
                        ENABLE_SYNOPSES=0
                        ;;
                    *)
                        echo "${RED}ERROR: Synopsis value is invalid!"
                        exit 1
                        ;;
                esac
            else
                greet
                echo "${RED}ERROR: Synopsis is not specified!"
                exit 1
            fi
            ;;
        -b|--bin)
            shift
            if test $# -gt 0; then
                case "$1" in
                    termbin*)
                        domain=termbin.com
                        ;;
                    ghostbin*)
                        domain=ghostbin.com
                        ;;
                    pastebin*)
                        domain=pastebin.com
                        ;;
                    paste.ee)
                        domain=paste.ee
                        ;;
                    p.ip.fi)
                        domain=p.ip.fi
                        ;;
                    pasteboard*)
                        domain=pasteboard.co
                        ;;
                    *)
                        greet
                        echo "${RED}ERROR: bin type specified is not supported!"
                        exit 1
                        ;;
                esac
            else
                greet
                echo "${RED}ERROR: no bin specified!"
                exit 1
            fi
            ;;
        -l|--list-bins)
            echo "${WHITE}---BEGIN BINS---"
            echo "${PINK}1. ghostbin.com [well supported: ~0.7% hitrate"
            echo "${PINK}2. termbin.com [well supported: ~4% hitrate]"
            echo "${PINK}3. pastebin.com [large key space, & cloudflare hates you]"
            echo "${PINK}4. paste.ee [meh]"
            echo "${PINK}5. p.ip.fi [well supported]"
            echo "${PINK}6. pasteboard.co [almost]"
            echo "${WHITE}---END BINS---"
            exit 0
            ;;
        -d|--database)
            shift
            if test $# -gt 0; then
                export db=$1
            else
                greet
                echo "${RED}ERROR: No database was specified!"
                exit 1
            fi
            ;;
        -u|--user-agent)
            shift
            if test $# -gt 0; then
                useragent=$1
            else
                greet
                echo "${RED}ERROR: No useragent was specified!"
                exit 1
            fi
            ;;
        -t|--tor)
            shift
            if test $# -gt 0; then
                tor=$1
                torargs="--socks5-hostname $tor"
            else
                greet
                echo "${RED}ERROR: Tor setting was not specified!"
                exit 1
            fi
            ;;
        -j|--job-limit)
            shift
            if test $# -gt 0; then
                joblimit=$1
            else
                greet
                echo "${RED}ERROR: Job Limit was not specified!"
                exit 1
            fi
            ;;
        -v|--version)
            echo $version
            exit 0
            ;;
    esac
    shift
done

if [ "$domain" = pasteboard ]; then
  ENABLE_SYNOPSES=0
fi

loot=$domain-loot

greet
pause

counter=0
[ -d "$loot" ] || mkdir -p $loot

if [ ! -f $db ]; then
    echo "${YELLOW}$db not found; creating...${RESET}"
    touch $db
    sqlite_execute $db "create table urls(id integer primary key autoincrement, url varchar(512) unique,  response integer, pii integer, md5 varchar(32), sqltime timestamp default current_timestamp not null);"
    echo -e "\n"
fi
tput civis; stty -echo
if [ "${joblimit}" = "1" ]; then
    while :; do
        action
    done
else
    while :; do
        action &
        counter=$(( counter + 1 ))
        throttle $joblimit
    done
fi
tput cnorm; stty echo
